#ifndef _TDA7317EQ_H_
#define _TDA7317EQ_H_

#include <system.h>
#include <stdio.h>

// define SSD1306 address
#define ssd1306_addr    0x78

// define TDA7317 address
#define	tda7317_addr1	0x84 // Base address
#define	tda7317_addr2	0x86 // Base address

// Pins
#define LED (portc.2)

// Tasks
#define	TASKS_LIMIT			8
#define TASK_ENCODER_SELECT     1
#define TASK_ENCODER_ADJUST     2
#define TASK_TIMER1             3

// Global variables
char cTask = 0;
char iBands[] = {0,0,0,0,0,0,0,0,0,0};
char iActiveBand = 0; // 0 for volume, 1 to 10 for eq bands
char iVolume = 47; // 0 for max, 47 for min -17.625dB
char iTimer1Count = 0;

// valid movements for rencPrevNextCode = 1,2,4,7,8,11,13,14
rom char *rencTable[] = {0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0};
static unsigned char rencPrevNextCode[] = {0, 0};
static unsigned char rencStore[] = {0, 0};


// Display for numbers, from 0 to 9 and very limited symbols/letters
// ROM array declared in program memory, not RAM
// 0 to 9*5 = numbers, 10*5 = decimal, 11*5 = minus, 12*5 = plus, 13*5 = d, 14*5 = B
rom char *dispChar = {
    0x3E, 0x51, 0x49, 0x45, 0x3E,
    0x00, 0x42, 0x7F, 0x40, 0x00,
    0x72, 0x49, 0x49, 0x49, 0x46,
    0x21, 0x41, 0x49, 0x4D, 0x33,
    0x18, 0x14, 0x12, 0x7F, 0x10,
    0x27, 0x45, 0x45, 0x45, 0x39,
    0x3C, 0x4A, 0x49, 0x49, 0x31,
    0x41, 0x21, 0x11, 0x09, 0x07,
    0x36, 0x49, 0x49, 0x49, 0x36,
    0x46, 0x49, 0x49, 0x29, 0x1E,
    0x00, 0x00, 0x60, 0x60, 0x00,
    0x00, 0x08, 0x08, 0x08, 0x00,
    0x08, 0x08, 0x3E, 0x08, 0x08,
    0x38, 0x44, 0x44, 0x28, 0x7F,
    0x7F, 0x49, 0x49, 0x49, 0x36
};

// Display for the first page of the SSD1306
// ROM array declared in program memory, not RAM
rom char *dispHeader = {
    0x0F,
    0x10,
    0x0F,
    0x00,
    0x1F,
    0x10,
    0x10,
    0x00,
    0x00,
    0x00,
    0x00,
    0x11,
    0x15,
    0x1F,
    0x00,
    0x1F,
    0x11,
    0x1F,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x15,
    0x1D,
    0x00,
    0x1F,
    0x11,
    0x1F,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x00,
    0x1D,
    0x15,
    0x17,
    0x00,
    0x1F,
    0x11,
    0x1F,
    0x00,
    0x00,
    0x1D,
    0x15,
    0x17,
    0x00,
    0x17,
    0x15,
    0x1D,
    0x00,
    0x1F,
    0x11,
    0x1F,
    0x00,
    0x00,
    0x17,
    0x15,
    0x1D,
    0x00,
    0x1F,
    0x11,
    0x1F,
    0x00,
    0x1F,
    0x11,
    0x1F,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x00,
    0x1F,
    0x08,
    0x14,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1D,
    0x15,
    0x17,
    0x00,
    0x1F,
    0x08,
    0x14,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x0F,
    0x08,
    0x1C,
    0x00,
    0x1F,
    0x08,
    0x14,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x15,
    0x1F,
    0x00,
    0x1F,
    0x08,
    0x14,
    0x00,
    0x00,
    0x00,
    0x00,
    0x1F,
    0x00,
    0x1F,
    0x15,
    0x1D,
    0x00,
    0x1F,
    0x08,
    0x14
};

// Methods
void saveData();
char eepromWrite(char address, char data);
void readData();
char eepromRead(char address);

void ssd1306StartCommand();
void ssd1306Init();
void ssd1306WriteAll();

void tda7317Write();

void encoderInit();
void encoderPoll();

#endif //_TDA7317EQ_H_
